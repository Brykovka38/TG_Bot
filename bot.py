from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
import datetime
import json
from typing import Dict, List
import logging
import pytz
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = "8316945407:AAEepiQe2QtOhHgCEfgGRJWL5ygghPiDiEg"

# –°–ª–æ–≤–∞—Ä—å —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –†–æ—Å—Å–∏–∏
RUSSIAN_TIMEZONES = {
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 'Europe/Kaliningrad',      # UTC+2
    '–ú–æ—Å–∫–≤–∞': 'Europe/Moscow',                # UTC+3
    '–°–∞–º–∞—Ä–∞': 'Europe/Samara',                # UTC+4
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'Asia/Yekaterinburg',     # UTC+5
    '–û–º—Å–∫': 'Asia/Omsk',                      # UTC+6
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'Asia/Krasnoyarsk',         # UTC+7
    '–ò—Ä–∫—É—Ç—Å–∫': 'Asia/Irkutsk',                # UTC+8
    '–Ø–∫—É—Ç—Å–∫': 'Asia/Yakutsk',                 # UTC+9
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 'Asia/Vladivostok',        # UTC+10
    '–ú–∞–≥–∞–¥–∞–Ω': 'Asia/Magadan',                # UTC+11
    '–ö–∞–º—á–∞—Ç–∫–∞': 'Asia/Kamchatka'              # UTC+12
}

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞ (UTC+7)
DEFAULT_TIMEZONE = 'Asia/Novosibirsk'

def get_local_time(timezone_name=DEFAULT_TIMEZONE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    try:
        tz = pytz.timezone(timezone_name)
        return datetime.now(tz)
    except:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        tz = pytz.timezone(DEFAULT_TIMEZONE)
        return datetime.now(tz)

def get_user_timezone(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    return DEFAULT_TIMEZONE

def get_cat_image(points):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫–æ—Ç–∏–∫–∞"""
    cat_images = {
        0: "1.jpg",      
        250: "2.jpg",    
        500: "3.jpg",    
        750: "4.jpg",   
        1000: "5.jpg",   
        1500: "6.jpg",   
    }

    suitable_levels = [level for level in cat_images.keys() if points >= level]
    if suitable_levels:
        level = max(suitable_levels)
        return cat_images[level]
    else:
        return cat_images[0]

class DeadlineManager:
    def __init__(self):
        self.init_database()
        self.update_database_schema()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –ë–î
    
    def update_database_schema(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã"""
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü timezone –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("PRAGMA table_info(users)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'timezone' not in columns:
                print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü timezone –≤ —Ç–∞–±–ª–∏—Ü—É users...")
                cursor.execute('ALTER TABLE users ADD COLUMN timezone TEXT DEFAULT "Asia/Novosibirsk"')
                conn.commit()
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü timezone —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü timezone —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –ë–î: {e}")
        finally:
            conn.close()
    
    def init_database(self):
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                total_points INTEGER DEFAULT 0,
                completed_tasks INTEGER DEFAULT 0,
                created_at TEXT,
                timezone TEXT DEFAULT 'Asia/Novosibirsk'
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                task_name TEXT,
                deadline_date TEXT,
                deadline_time TEXT,
                is_completed BOOLEAN DEFAULT FALSE,
                points_awarded BOOLEAN DEFAULT FALSE,
                created_at TEXT,
                last_notification TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def get_or_create_user(self, user_id: int, username: str = ""):
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if user is None:
            cursor.execute(
                'INSERT INTO users (user_id, username, total_points, completed_tasks, created_at, timezone) VALUES (?, ?, ?, ?, ?, ?)',
                (user_id, username, 0, 0, get_local_time().isoformat(), DEFAULT_TIMEZONE)
            )
            conn.commit()
        
        conn.close()
    
    def get_user_timezone(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT timezone FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result else DEFAULT_TIMEZONE
    

    
    def add_task(self, user_id: int, task_name: str, deadline_date: str, deadline_time: str = "23:59"):
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        user_timezone = self.get_user_timezone(user_id)
        current_time = get_local_time(user_timezone)
        
        cursor.execute(
            'INSERT INTO tasks (user_id, task_name, deadline_date, deadline_time, created_at) VALUES (?, ?, ?, ?, ?)',
            (user_id, task_name, deadline_date, deadline_time, current_time.isoformat())
        )
        task_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return task_id
    
    def complete_task(self, user_id: int, task_id: int):
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        cursor.execute(
            'UPDATE tasks SET is_completed = TRUE WHERE task_id = ? AND user_id = ?',
            (task_id, user_id)
        )
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏
        cursor.execute(
            'SELECT points_awarded FROM tasks WHERE task_id = ?', (task_id,)
        )
        task = cursor.fetchone()
        
        if task and not task[0]:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
            cursor.execute(
                'UPDATE users SET total_points = total_points + 50, completed_tasks = completed_tasks + 1 WHERE user_id = ?',
                (user_id,)
            )
            # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã
            cursor.execute(
                'UPDATE tasks SET points_awarded = TRUE WHERE task_id = ?', (task_id,)
            )
        
        conn.commit()
        conn.close()
    
    def get_user_tasks(self, user_id: int, include_completed: bool = False):
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        if include_completed:
            cursor.execute(
                'SELECT * FROM tasks WHERE user_id = ? ORDER BY deadline_date, deadline_time',
                (user_id,)
            )
        else:
            cursor.execute(
                'SELECT * FROM tasks WHERE user_id = ? AND is_completed = FALSE ORDER BY deadline_date, deadline_time',
                (user_id,)
            )
        
        tasks = cursor.fetchall()
        conn.close()
        
        return tasks
    
    def get_user_stats(self, user_id: int):
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT total_points, completed_tasks FROM users WHERE user_id = ?', (user_id,))
        user_stats = cursor.fetchone()
        
        cursor.execute('SELECT COUNT(*) FROM tasks WHERE user_id = ? AND is_completed = FALSE', (user_id,))
        active_tasks = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'total_points': user_stats[0] if user_stats else 0,
            'completed_tasks': user_stats[1] if user_stats else 0,
            'active_tasks': active_tasks
        }
    
    def get_overdue_tasks(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        conn = sqlite3.connect('/data/deadlines.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute('''
            SELECT t.task_id, t.user_id, t.task_name, t.deadline_date, t.deadline_time, 
                   u.username, t.last_notification, u.timezone
            FROM tasks t 
            JOIN users u ON t.user_id = u.user_id 
            WHERE t.is_completed = FALSE
        ''')
        
        tasks = cursor.fetchall()
        conn.close()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks_to_notify = []
        for task in tasks:
            task_id, user_id, task_name, deadline_date, deadline_time, username, last_notification, user_timezone = task
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_now = get_local_time(user_timezone)
            current_date = user_now.date().isoformat()
            current_time = user_now.time().strftime('%H:%M')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_overdue = (deadline_date < current_date or 
                         (deadline_date == current_date and deadline_time < current_time))
            
            if is_overdue:
                if last_notification:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 12 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    last_notification_time = datetime.fromisoformat(last_notification)
                    time_since_last_notification = user_now - last_notification_time
                    if time_since_last_notification.total_seconds() >= 43200:  # 12 —á–∞—Å–æ–≤
                        tasks_to_notify.append(task)
                else:
                    # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
                    tasks_to_notify.append(task)
        
        return tasks_to_notify

async def check_deadlines(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
    try:
        deadline_manager = context.bot_data['deadline_manager']
        overdue_tasks = deadline_manager.get_overdue_tasks()
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤... –ù–∞–π–¥–µ–Ω–æ {len(overdue_tasks)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        for task in overdue_tasks:
            task_id, user_id, task_name, deadline_date, deadline_time, username, last_notification, user_timezone = task
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            user_now = get_local_time(user_timezone)
            current_date = user_now.date().isoformat()
            current_time = user_now.time().strftime('%H:%M')
            
            print(f"üìã –ó–∞–¥–∞—á–∞ {task_id}: {task_name}")
            print(f"   –î–µ–¥–ª–∞–π–Ω: {deadline_date} {deadline_time}")
            print(f"   –°–µ–π—á–∞—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_date} {current_time} ({user_timezone})")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            year, month, day = deadline_date.split('-')
            formatted_date = f"{day}.{month}.{year}"
            
            message = (
                f"üö® *–î–ï–î–õ–ê–ô–ù!*\n\n"
                f"*–ó–∞–¥–∞—á–∞:* {task_name}\n"
                f"*–ë—ã–ª–æ –¥–æ:* {formatted_date} ‚è∞ {deadline_time}\n"
                f"*ID:* {task_id}\n\n"
                f"‚ö†Ô∏è *–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É!*"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
                conn = sqlite3.connect('/data/deadlines.db')
                cursor = conn.cursor()
                cursor.execute(
                    'UPDATE tasks SET last_notification = ? WHERE task_id = ?',
                    (user_now.isoformat(), task_id)
                )
                conn.commit()
                conn.close()
                
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_deadlines: {e}")

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")],
        [KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")],
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_timezone_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezones = [
        ["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)", "–ú–æ—Å–∫–≤–∞ (UTC+3)"],
        ["–°–∞–º–∞—Ä–∞ (UTC+4)", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)"],
        ["–û–º—Å–∫ (UTC+6)", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)"],
        ["–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (UTC+7)", "–ò—Ä–∫—É—Ç—Å–∫ (UTC+8)"],
        ["–Ø–∫—É—Ç—Å–∫ (UTC+9)", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)"],
        ["–ú–∞–≥–∞–¥–∞–Ω (UTC+11)", "–ö–∞–º—á–∞—Ç–∫–∞ (UTC+12)"],
        ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(timezones, resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
ADDING_TASK, ADDING_DATE, ADDING_TIME = range(3)
SETTING_TIMEZONE = 4

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ª—é–±—ã—Ö —á–∞—Ç–æ–≤"""
    if update.message.chat.type == 'private':
        # –õ–∏—á–Ω—ã–π —á–∞—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
        user = update.message.from_user
        deadline_manager = context.bot_data['deadline_manager']
        
        deadline_manager.get_or_create_user(user.id, user.username or user.first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_timezone = deadline_manager.get_user_timezone(user.id)
        current_time = get_local_time(user_timezone)
        
        welcome_text = f"""*–ü—Ä–∏–≤–µ—Ç, {user.first_name}!* üïê

üìÖ *–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏*

üïí *–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {user_timezone}
‚è∞ *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* {current_time.strftime('%H:%M')}

–ó–∞ –∫–∞–∂–¥—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å *50 –±–∞–ª–ª–æ–≤*!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
    else:
        # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç - —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )

async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.message.from_user.id
    deadline_manager = context.bot_data['deadline_manager']
    
    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deadline_manager.get_or_create_user(user_id, update.message.from_user.username or update.message.from_user.first_name)
    
    if text == "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω":
        await update.message.reply_text(
            "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–°–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ Python'",
            parse_mode='Markdown'
        )
        context.user_data['state'] = ADDING_TASK
    
    elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω":
        tasks = deadline_manager.get_user_tasks(user_id, include_completed=False)
        
        if not tasks:
            await update.message.reply_text(
                "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!",
                reply_markup=get_main_keyboard()
            )
            return
        
        tasks_text = "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        for i, task in enumerate(tasks, 1):
            task_id, _, task_name, deadline_date, deadline_time, is_completed, points_awarded, created_at, last_notification = task
            tasks_text += f"{i}. *{task_name}*\n"
            tasks_text += f"   üìÖ {deadline_date} ‚è∞ {deadline_time}\n"
            tasks_text += f"   üÜî *ID*: {task_id}\n\n"
        
        tasks_text += "*–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*"
        
        await update.message.reply_text(
            tasks_text,
            parse_mode='Markdown'
        )
        context.user_data['state'] = 'completing_task'
    
    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏":
        tasks = deadline_manager.get_user_tasks(user_id, include_completed=True)
        
        if not tasks:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!",
                reply_markup=get_main_keyboard()
            )
            return
        
        active_tasks = []
        completed_tasks = []
        
        for task in tasks:
            task_id, _, task_name, deadline_date, deadline_time, is_completed, points_awarded, created_at, last_notification = task
            if is_completed:
                completed_tasks.append(task)
            else:
                active_tasks.append(task)
        
        response_text = "*–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
        
        if active_tasks:
            response_text += "*–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:*\n"
            for task in active_tasks:
                task_id, _, task_name, deadline_date, deadline_time, is_completed, points_awarded, created_at, last_notification = task
                response_text += f"‚Ä¢ {task_name}\n"
                response_text += f"  üìÖ {deadline_date} ‚è∞ {deadline_time}\n"
                response_text += f"  üÜî *ID*: {task_id}\n\n"
        
        if completed_tasks:
            response_text += "*–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:*\n"
            for task in completed_tasks:
                task_id, _, task_name, deadline_date, deadline_time, is_completed, points_awarded, created_at, last_notification = task
                status = "+50 –±–∞–ª–ª–æ–≤" if points_awarded else "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                response_text += f"‚Ä¢ {task_name} - {status}\n"
        
        await update.message.reply_text(
            response_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
    
    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å":
        stats = deadline_manager.get_user_stats(user_id)
        points = stats['total_points']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        user_timezone = deadline_manager.get_user_timezone(user_id)
        current_time = get_local_time(user_timezone)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∏–∫–∞
        cat_image_path = get_cat_image(points)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if points >= 1500:
            level = "üê± –ö–æ—Ç–∏–∫-–õ–µ–≥–µ–Ω–¥–∞ üèÜ"
            message = "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—à–∏–Ω—ã! –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç! ‚ú®"
            next_goal = "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
        elif points >= 1000:
            level = "üê± –°—É–ø–µ—Ä-–ö–æ—Ç–∏–∫ ‚≠ê"
            message = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! üåü"
            next_goal = "1500 –±–∞–ª–ª–æ–≤ - —Å—Ç–∞–Ω—å –õ–µ–≥–µ–Ω–¥–æ–π!"
        elif points >= 750:
            level = "üê± –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ö–æ—Ç–∏–∫ üí™"
            message = "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
            next_goal = "1000 –±–∞–ª–ª–æ–≤ - —Å—Ç–∞–Ω—å –°—É–ø–µ—Ä-–ö–æ—Ç–∏–∫–æ–º!"
        elif points >= 500:
            level = "üê± –£–≤–µ—Ä–µ–Ω–Ω—ã–π –ö–æ—Ç–∏–∫ üòä"
            message = "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! üöÄ"
            next_goal = "750 –±–∞–ª–ª–æ–≤ - —Å—Ç–∞–Ω—å –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º!"
        elif points >= 250:
            level = "üê± –ù–∞—á–∏–Ω–∞—é—â–∏–π –ö–æ—Ç–∏–∫ üêæ"
            message = "–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –í—ã —É–∂–µ –º–Ω–æ–≥–æ–≥–æ –¥–æ—Å—Ç–∏–≥–ª–∏! üåà"
            next_goal = "500 –±–∞–ª–ª–æ–≤ - —Å—Ç–∞–Ω—å –£–≤–µ—Ä–µ–Ω–Ω—ã–º!"
        else:
            level = "üê± –ú–∞–ª—ã—à-–ö–æ—Ç–∏–∫ üå±"
            message = "–ö–∞–∂–¥–æ–µ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞–≥–∞! üåü"
            next_goal = "250 –±–∞–ª–ª–æ–≤ - —Å—Ç–∞–Ω—å –ù–∞—á–∏–Ω–∞—é—â–∏–º!"
        
        status_text = f"""üèÜ *–í–∞—à —Å—Ç–∞—Ç—É—Å*

{level}

{message}

üéØ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:* {stats['completed_tasks']}
üìä *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:* {stats['active_tasks']}
üí∞ *–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:* {stats['total_points']}
üïí *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {user_timezone}
‚è∞ *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* {current_time.strftime('%H:%M')}

üí° *–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:*
{next_goal}

üêæ *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é!* üéÅ"""
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é
            with open(cat_image_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=status_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            await update.message.reply_text(
                status_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
    
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏":
        user_timezone = deadline_manager.get_user_timezone(user_id)
        current_time = get_local_time(user_timezone)
        
        timezone_text = f"""üïí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*

*–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {user_timezone}
*–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* {current_time.strftime('%H:%M %d.%m.%Y')}

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:"""
        
        await update.message.reply_text(
            timezone_text,
            reply_markup=get_timezone_keyboard(),
            parse_mode='Markdown'
        )
        context.user_data['state'] = SETTING_TIMEZONE
    
    elif text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=get_main_keyboard()
        )
        context.user_data.clear()
    
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        state = context.user_data.get('state')
        
        if state == ADDING_TASK:
            context.user_data['task_name'] = text
            await update.message.reply_text(
                "üìÖ *–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):*\n\n"
                "–ü—Ä–∏–º–µ—Ä: 25.12.2024",
                parse_mode='Markdown'
            )
            context.user_data['state'] = ADDING_DATE

        elif state == ADDING_DATE:
			try:
				# –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
				text = text.strip()
        
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
				parts = text.split('.')
				if len(parts) != 3:
					raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ - —á–∏—Å–ª–∞
				if not all(part.isdigit() for part in parts):
					raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")

				day, month, year = map(int, parts)
        
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
				if day < 1 or day > 31:
					raise ValueError("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31")
				if month < 1 or month > 12:
					raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
				if year < 1000 or year > 2100:
					raise ValueError("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1000 –¥–æ 2100")

				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
				deadline_date_obj = datetime.date(year, month, day)
				deadline_date = deadline_date_obj.isoformat()

				context.user_data['deadline_date'] = deadline_date
        
				await update.message.reply_text(
					"‚è∞ *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–ß–ß:–ú–ú):*\n\n"
					"–ü—Ä–∏–º–µ—Ä: 18:30\n"
					"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (23:59)",
					parse_mode='Markdown'
				)
				context.user_data['state'] = ADDING_TIME
        
				except ValueError as e:
					error_msg = str(e)
					if "day is out of range" in error_msg.lower():
						await update.message.reply_text(
						"‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞!*\n"
						"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è!\n"
						"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
						parse_mode='Markdown'
						)
					else:
						await update.message.reply_text(
						f"‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!*\n"
						f"–û—à–∏–±–∫–∞: {error_msg}\n"
						f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*\n"
						f"–ü—Ä–∏–º–µ—Ä: *25.12.2024*",
						parse_mode='Markdown'
						)
				except Exception as e:
					await update.message.reply_text(
					f"‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã!*\n"
					f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*\n"
					f"–ü—Ä–∏–º–µ—Ä: *25.12.2024*",
					parse_mode='Markdown'
					)
        
        elif state == ADDING_TIME:
            deadline_time = "23:59"
            if text.lower() != '–Ω–µ—Ç' and ':' in text:
                try:
                    hours, minutes = map(int, text.split(':'))
                    if 0 <= hours <= 23 and 0 <= minutes <= 59:
                        deadline_time = f"{hours:02d}:{minutes:02d}"
                except:
                    pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
            task_name = context.user_data['task_name']
            deadline_date = context.user_data['deadline_date']
            
            task_id = deadline_manager.add_task(
                user_id=user_id,
                task_name=task_name,
                deadline_date=deadline_date,
                deadline_time=deadline_time
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            year, month, day = deadline_date.split('-')
            formatted_date = f"{day}.{month}.{year}"
            
            await update.message.reply_text(
                f"*–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {task_name}\n"
                f"üìÖ *–î–∞—Ç–∞:* {formatted_date}\n"
                f"‚è∞ *–í—Ä–µ–º—è:* {deadline_time}\n"
                f"üÜî *ID –∑–∞–¥–∞—á–∏:* {task_id}\n\n"
                f"*–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 50 –±–∞–ª–ª–æ–≤!*",
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
            context.user_data.clear()
        
        elif state == 'completing_task':
            try:
                task_id = int(text)
                tasks = deadline_manager.get_user_tasks(user_id, include_completed=False)
                task_ids = [task[0] for task in tasks]
                
                if task_id in task_ids:
                    deadline_manager.complete_task(user_id, task_id)
                    await update.message.reply_text(
                        f"üéâ *–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                        f"‚úÖ +50 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç!\n"
                        f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}",
                        reply_markup=get_main_keyboard(),
                        parse_mode='Markdown'
                    )
                    context.user_data.clear()
                else:
                    await update.message.reply_text(
                        "‚ùå *–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!*\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                        parse_mode='Markdown'
                    )
            except ValueError:
                await update.message.reply_text(
                    "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏:",
                    parse_mode='Markdown'
                )
        
        elif state == SETTING_TIMEZONE:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            timezone_mapping = {
                "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)": "Europe/Kaliningrad",
                "–ú–æ—Å–∫–≤–∞ (UTC+3)": "Europe/Moscow", 
                "–°–∞–º–∞—Ä–∞ (UTC+4)": "Europe/Samara",
                "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)": "Asia/Yekaterinburg",
                "–û–º—Å–∫ (UTC+6)": "Asia/Omsk",
                "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)": "Asia/Novosibirsk",
                "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (UTC+7)": "Asia/Krasnoyarsk",
                "–ò—Ä–∫—É—Ç—Å–∫ (UTC+8)": "Asia/Irkutsk",
                "–Ø–∫—É—Ç—Å–∫ (UTC+9)": "Asia/Yakutsk",
                "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)": "Asia/Vladivostok",
                "–ú–∞–≥–∞–¥–∞–Ω (UTC+11)": "Asia/Magadan",
                "–ö–∞–º—á–∞—Ç–∫–∞ (UTC+12)": "Asia/Kamchatka"
            }
            
            if text in timezone_mapping:
                new_timezone = timezone_mapping[text]
                if deadline_manager.set_user_timezone(user_id, new_timezone):
                    current_time = get_local_time(new_timezone)
                    await update.message.reply_text(
                        f"‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!*\n\n"
                        f"üïí *–ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {new_timezone}\n"
                        f"‚è∞ *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* {current_time.strftime('%H:%M %d.%m.%Y')}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!",
                        reply_markup=get_main_keyboard(),
                        parse_mode='Markdown'
                    )
                    context.user_data.clear()
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=get_timezone_keyboard()
                    )
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=get_timezone_keyboard()
                )
        
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëÜ",
                reply_markup=get_main_keyboard()
            )

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    text = update.message.text
    user_id = update.message.from_user.id
    bot_username = context.bot.username
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–¥–ª–∞–π–Ω–æ–≤
    deadline_manager = context.bot_data['deadline_manager']
    
    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deadline_manager.get_or_create_user(user_id, update.message.from_user.username or update.message.from_user.first_name)
    
    # –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if text.startswith('/') or (bot_username and f"@{bot_username}" in text):
        
        if '/start' in text or '–Ω–∞—á–∞—Ç—å' in text.lower():
            welcome_text = f"""ü§ñ *–ü—Ä–∏–≤–µ—Ç, {update.message.from_user.first_name}!*

–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏! üéØ

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø—ã:*
/add_deadline - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω
/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏  
/my_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å

*–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!* üí¨"""
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
        
        elif '/add_deadline' in text or '–¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω' in text.lower():
            await update.message.reply_text(
                f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @{bot_username}\n"
                "–¢–∞–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏! üéØ"
            )
        
        elif '/my_tasks' in text or '–º–æ–∏ –∑–∞–¥–∞—á–∏' in text.lower():
            tasks = deadline_manager.get_user_tasks(user_id, include_completed=False)
            
            if not tasks:
                await update.message.reply_text(
                    f"üì≠ {update.message.from_user.first_name}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!",
                    parse_mode='Markdown'
                )
                return
            
            tasks_text = f"üìã *–ó–∞–¥–∞—á–∏ {update.message.from_user.first_name}:*\n\n"
            for i, task in enumerate(tasks, 1):
                task_id, _, task_name, deadline_date, deadline_time, is_completed, points_awarded, created_at, last_notification = task
                tasks_text += f"{i}. *{task_name}*\n"
                tasks_text += f"   üìÖ {deadline_date} ‚è∞ {deadline_time}\n"
                tasks_text += f"   üÜî ID: {task_id}\n\n"
            
            await update.message.reply_text(tasks_text, parse_mode='Markdown')
        
        elif '/my_stats' in text or '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in text.lower():
            stats = deadline_manager.get_user_stats(user_id)
            
            status_text = f"""*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {update.message.from_user.first_name}:*

üéØ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:* {stats['completed_tasks']}
üìä *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:* {stats['active_tasks']}
üí∞ *–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:* {stats['total_points']}

üê± *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!* üéÅ"""
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
        
        elif '/help' in text or '–ø–æ–º–æ—â—å' in text.lower():
            help_text = """ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

*–í –≥—Ä—É–ø–ø–µ:*
/add_deadline - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω
/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏
/my_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å

*–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞* –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üí¨
–¢–∞–º –≤–∞—Å –∂–¥–µ—Ç —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏! üéØ"""
            
            await update.message.reply_text(help_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

*–í –≥—Ä—É–ø–ø–µ:*
/add_deadline - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω
/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏
/my_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å

*–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞* –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üí¨
–¢–∞–º –≤–∞—Å –∂–¥–µ—Ç —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏! üéØ"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def my_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_tasks"""
    user_id = update.message.from_user.id
    deadline_manager = context.bot_data['deadline_manager']
    
    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deadline_manager.get_or_create_user(user_id, update.message.from_user.username or update.message.from_user.first_name)
    
    tasks = deadline_manager.get_user_tasks(user_id, include_completed=False)
    
    if not tasks:
        await update.message.reply_text(
            f"üì≠ {update.message.from_user.first_name}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!",
            parse_mode='Markdown'
        )
        return
    
    tasks_text = f"üìã *–ó–∞–¥–∞—á–∏ {update.message.from_user.first_name}:*\n\n"
    for i, task in enumerate(tasks, 1):
        task_id, _, task_name, deadline_date, deadline_time, is_completed, points_awarded, created_at, last_notification = task
        tasks_text += f"{i}. *{task_name}*\n"
        tasks_text += f"   üìÖ {deadline_date} ‚è∞ {deadline_time}\n"
        tasks_text += f"   üÜî ID: {task_id}\n\n"
    
    await update.message.reply_text(tasks_text, parse_mode='Markdown')

async def my_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_stats"""
    user_id = update.message.from_user.id
    deadline_manager = context.bot_data['deadline_manager']
    
    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deadline_manager.get_or_create_user(user_id, update.message.from_user.username or update.message.from_user.first_name)
    
    stats = deadline_manager.get_user_stats(user_id)
    
    status_text = f"""*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {update.message.from_user.first_name}:*

üéØ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:* {stats['completed_tasks']}
üìä *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:* {stats['active_tasks']}
üí∞ *–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:* {stats['total_points']}

üê± *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!* üéÅ"""
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def add_deadline_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_deadline"""
    bot_username = context.bot.username
    await update.message.reply_text(
        f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @{bot_username}\n"
        "–¢–∞–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏! üéØ"
    )

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.bot_data['deadline_manager'] = DeadlineManager()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_tasks", my_tasks_command))
    application.add_handler(CommandHandler("my_stats", my_stats_command))
    application.add_handler(CommandHandler("add_deadline", add_deadline_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, 
        handle_private_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & (filters.ChatType.GROUP | filters.ChatType.SUPERGROUP), 
        handle_group_message
    ))
    
    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    job_queue = application.job_queue
    job_queue.run_repeating(
        callback=check_deadlines,
        interval=60,
        first=10
    )
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö –∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
    application.run_polling()

if __name__ == "__main__":
    main()

# # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
# BOT_TOKEN = "8316945407:AAEepiQe2QtOhHgCEfgGRJWL5ygghPiDiEg"



